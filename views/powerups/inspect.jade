doctype html
html.
	<head>
	  <title>Hello React</title>
	  <script src="http://fb.me/react-0.12.2.js"></script>
	  <script src="http://fb.me/JSXTransformer-0.12.2.js"></script>
	  <script src="http://code.jquery.com/jquery-1.10.0.min.js"></script>
	  <link rel="stylesheet" href="/stylesheets/dnd.css" />
	</head>
	<body>
	  <div id="content"></div>
	  <script type="text/jsx">

	  var colors = ['jago','wulf','thunder','sadira','orchid','glacius','spinal','fulgore','tj','maya','kanra','riptor','omen']
	  var placeholder = document.createElement("li");
	  placeholder.className = "placeholder";

	    
	  var List = React.createClass({
	    getInitialState: function() {
	      return {data: this.props.data};
	    },
	    dragStart: function(e) {
	      this.dragged = e.currentTarget;
	      e.dataTransfer.effectAllowed = 'move';

	      // Firefox requires calling dataTransfer.setData
	      // for the drag to properly work
	      e.dataTransfer.setData("text/html", e.currentTarget);
	    },
	    dragEnd: function(e) {

	      this.dragged.style.display = "block";
	      this.dragged.parentNode.removeChild(placeholder);

	      // Update state
	      var data = this.state.data;
	      var from = Number(this.dragged.dataset.id);
	      var to = Number(this.over.dataset.id);
	      if(from < to) to--;
	      if(this.nodePlacement == "after") to++;
	      data.splice(to, 0, data.splice(from, 1)[0]);
	      this.setState({data: data});
	    },
	    dragOver: function(e) {
	      e.preventDefault();
	      this.dragged.style.display = "none";
	      if(e.target.className == "placeholder") return;
	        this.over = e.target;
	         // Inside the dragOver method
	         var relY = e.clientY - this.over.offsetTop;
	         var height = this.over.offsetHeight / 2;
	         var parent = e.target.parentNode;

	         if(relY > height) {
	           this.nodePlacement = "after";
	           parent.insertBefore(placeholder, e.target.nextElementSibling);
	         }
	         else if(relY < height) {
	           this.nodePlacement = "before"
	           parent.insertBefore(placeholder, e.target);
	      }
	    },
	    render: function() {
	      var listItems = this.state.data.map(function(item, i) {
	        return (
	          <li data-id={i}
	              key={i}
	              draggable="true"
	              name={item}
	              onDragEnd={this.dragEnd}
	              onDragStart={this.dragStart}>
	            {item}
	          </li>
	        );
	      }, this);
	      return (
	        <div>
	          <ul onDragOver={this.dragOver}>{listItems}</ul>
	          <Formy ordered={listItems}/>
	        </div>
	        )
	    }
	  });
	
	  var Formy = React.createClass({
	    render: function() {
	      var formValues=[];

	      for(var i=0;i<this.props.ordered.length;i++){
	        formValues.push(<input type="hidden" name={i} value={this.props.ordered[i].props.name} />)
	      }
	      return (
	        <div>
	          <form action='http://localhost:3000/submit' method='post'>
	            <ul>{formValues} </ul>
	            <input type="submit" value="SUBMIT" />
	          </form>
	        </div>
	      )
	    }
	  })

	  React.render(
	      <List data={colors} />, document.body
	  );

	  </script>
	</body>